{"version":3,"sources":["../../../packages/animations/esm5/src/players/animation_player.js","../../../packages/animations/esm5/src/players/animation_group_player.js"],"names":["NoopAnimationPlayer","duration","delay","this","_onDoneFns","_onStartFns","_onDestroyFns","_started","totalTime","prototype","_onFinish","_finished","fn","push","play","hasStarted","triggerMicrotask","scheduleMicroTask","_this","_onStart","destroy","_destroyed","triggerCallback","phaseName","methods","AnimationGroupPlayer","_players","parentPlayer","players","doneCount","destroyCount","startCount","total","length","forEach","player","onDone","onDestroy","_onDestroy","onStart","reduce","time","Math","max","init","finish","reset","setPosition","p","timeAtPosition","getPosition","min","beforeDestroy"],"mappings":";;;;;;;;;;;;;;;;;;;;sFA+D8B,oBACjBA,oBAAmBC,SAAAC,YACR,IAAZD,WAAkBA,SAAA,QACjB,IAADC,QAAoBA,MAAA,GACxBC,KAAKC,cACLD,KAAKE,eACLF,KAAKG,iBACRH,KAAAI,UAAA,8DAIDJ,KAAAK,UAAoBP,SAAUC,iCAKjBO,UAAiBC,qBAI5BP,KAAAQ,4IAcF,SAAAC,IAAAT,KAAoBE,YAAUQ,KAAMD,0CASpC,SAAAA,IAAAT,KAAoBC,WAAUS,KAAAD,qOA2BjBH,UAAWK,gBAItBX,KAAAY,8FAUEN,UAAkBO,2CAKtBC,kBAAoB,WAAU,OAAQC,MAAAR,mCAKlBD,UAAMU,wEAK1BhB,KAAAE,0MA0BaI,UAAiBW,mBAItBjB,KAAKkB,aACLlB,KAAKkB,YAAa,EACblB,KAAAY,cACRZ,KAAAgB,2IAaL,wJAsBIV,UAAqBa,gBAIzB,SAAOC,WACP,IAAAC,QAAA,SAAAD,UAAApB,KAAAE,YAAAF,KAAAC,4FA5K0B,wBC9CC,oBAClBqB,qBAAiBC,UACtB,IAAIR,MAACf,KACLA,KAAKC,cACLD,KAAKE,eACLF,KAAKQ,WAAY,EACjBR,KAAKI,UAAU,EACfJ,KAAAkB,YAAA,EACAlB,KAAAG,iBACAH,KAAAwB,aAAA,KACAxB,KAAAK,UAAA,EACAL,KAAIyB,QAAUF,aACOG,UAAC,EACrBC,aAAA,EACIC,WAAA,EACYC,MAAQ7B,KAAAyB,QAAgBK,OACjC,2BACU,WAAkB,OAAEf,MAAAR,mBAG7BkB,QAAEM,QAAA,SAAAC,QACHA,OAAOC,OAAA,aACGP,WAAYG,OACdd,MAAMR,cAGdyB,OAAOE,UAAQ,aACLP,cAAcE,OAChBd,MAAMoB,eAGfH,OAAAI,QAAA,aACNR,YAAAC,OACad,MAAQC,eAK1BhB,KAAAK,UAAqBL,KAAAyB,QAAUY,OAAS,SAAAC,KAAAN,QAAA,OAAAO,KAAAC,IAAAF,KAAAN,OAAA3B,YAAA,+BAK3BC,UAAiBC,qBAI5BP,KAAAQ,0IAYF,WAAAR,KAAAyB,QAAqBM,QAAU,SAAOC,QAAA,OAAAA,OAAAS,8GAajBnC,UAAQU,oBAI3BhB,KAAAY,gJAcF,SAAAH,IAAAT,KAAqBC,WAAUS,KAAAD,wLAoBXH,UAAAK,gBAIlBX,KAAAwB,0CAIFxB,KAAAyB,QAAAM,QAAqB,SAAUC,QAAK,OAAAA,OAAArB,iQAmBnBL,UAAQoC,mCAKzB1C,KAAAyB,QAAAM,QAAqB,SAAUC,QAAO,OAAAA,OAAAU,sGAYzBpC,UAAkB6B,sBAIvBnC,KAAKkB,aACRlB,KAAAkB,YAAA,EACHlB,KAAAO,+KASiBD,UAASqC,2JAaxBrC,UAAqBsC,qBAIlBC,GACL,IAAAC,eAAAD,EAAA7C,KAAAK,iLASeC,UAAQyC,uBAIrB,IAAWC,IAAA,EAKf,OAJEhD,KAAAyB,QAAAM,QAAA,SAAAC,yDAIFgB,0BAKmB1C,UAAA2C,yBAIjBjD,KAAAyB,QAAAM,QAAA,SAAAC,6EAWE1B,UAAqBa,gBAIzB,SAAOC,WACP,IAAAC,QAAA,SAAAD,UAAApB,KAAAE,YAAAF,KAAAC,6FAtO2B","file":"/home/travis/build/angular/angular/dist/packages-dist/animations/bundles/animations.umd.min.js.map","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport { scheduleMicroTask } from '../util';\n/**\n * AnimationPlayer controls an animation sequence that was produced from a programmatic animation.\n * (see {\\@link AnimationBuilder AnimationBuilder} for more information on how to create programmatic\n * animations.)\n *\n * \\@experimental Animation support is experimental.\n * @record\n */\nexport function AnimationPlayer() { }\nfunction AnimationPlayer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AnimationPlayer.prototype.onDone;\n    /** @type {?} */\n    AnimationPlayer.prototype.onStart;\n    /** @type {?} */\n    AnimationPlayer.prototype.onDestroy;\n    /** @type {?} */\n    AnimationPlayer.prototype.init;\n    /** @type {?} */\n    AnimationPlayer.prototype.hasStarted;\n    /** @type {?} */\n    AnimationPlayer.prototype.play;\n    /** @type {?} */\n    AnimationPlayer.prototype.pause;\n    /** @type {?} */\n    AnimationPlayer.prototype.restart;\n    /** @type {?} */\n    AnimationPlayer.prototype.finish;\n    /** @type {?} */\n    AnimationPlayer.prototype.destroy;\n    /** @type {?} */\n    AnimationPlayer.prototype.reset;\n    /** @type {?} */\n    AnimationPlayer.prototype.setPosition;\n    /** @type {?} */\n    AnimationPlayer.prototype.getPosition;\n    /** @type {?} */\n    AnimationPlayer.prototype.parentPlayer;\n    /** @type {?} */\n    AnimationPlayer.prototype.totalTime;\n    /** @type {?|undefined} */\n    AnimationPlayer.prototype.beforeDestroy;\n    /** @type {?|undefined} */\n    AnimationPlayer.prototype.triggerCallback;\n    /** @type {?|undefined} */\n    AnimationPlayer.prototype.disabled;\n}\n/**\n * \\@experimental Animation support is experimental.\n */\nvar /**\n * \\@experimental Animation support is experimental.\n */\nNoopAnimationPlayer = /** @class */ (function () {\n    function NoopAnimationPlayer(duration, delay) {\n        if (duration === void 0) { duration = 0; }\n        if (delay === void 0) { delay = 0; }\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._started = false;\n        this._destroyed = false;\n        this._finished = false;\n        this.parentPlayer = null;\n        this.totalTime = duration + delay;\n    }\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype._onFinish = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(function (fn) { return fn(); });\n            this._onDoneFns = [];\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.onStart = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onStartFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.onDone = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onDoneFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.onDestroy = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onDestroyFns.push(fn); };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.hasStarted = /**\n     * @return {?}\n     */\n    function () { return this._started; };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.init = /**\n     * @return {?}\n     */\n    function () { };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.play = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.hasStarted()) {\n            this._onStart();\n            this.triggerMicrotask();\n        }\n        this._started = true;\n    };\n    /* @internal */\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.triggerMicrotask = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        scheduleMicroTask(function () { return _this._onFinish(); });\n    };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype._onStart = /**\n     * @return {?}\n     */\n    function () {\n        this._onStartFns.forEach(function (fn) { return fn(); });\n        this._onStartFns = [];\n    };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.pause = /**\n     * @return {?}\n     */\n    function () { };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.restart = /**\n     * @return {?}\n     */\n    function () { };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.finish = /**\n     * @return {?}\n     */\n    function () { this._onFinish(); };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            if (!this.hasStarted()) {\n                this._onStart();\n            }\n            this.finish();\n            this._onDestroyFns.forEach(function (fn) { return fn(); });\n            this._onDestroyFns = [];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.reset = /**\n     * @return {?}\n     */\n    function () { };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.setPosition = /**\n     * @param {?} p\n     * @return {?}\n     */\n    function (p) { };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.getPosition = /**\n     * @return {?}\n     */\n    function () { return 0; };\n    /* @internal */\n    /**\n     * @param {?} phaseName\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.triggerCallback = /**\n     * @param {?} phaseName\n     * @return {?}\n     */\n    function (phaseName) {\n        var /** @type {?} */ methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach(function (fn) { return fn(); });\n        methods.length = 0;\n    };\n    return NoopAnimationPlayer;\n}());\n/**\n * \\@experimental Animation support is experimental.\n */\nexport { NoopAnimationPlayer };\nfunction NoopAnimationPlayer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NoopAnimationPlayer.prototype._onDoneFns;\n    /** @type {?} */\n    NoopAnimationPlayer.prototype._onStartFns;\n    /** @type {?} */\n    NoopAnimationPlayer.prototype._onDestroyFns;\n    /** @type {?} */\n    NoopAnimationPlayer.prototype._started;\n    /** @type {?} */\n    NoopAnimationPlayer.prototype._destroyed;\n    /** @type {?} */\n    NoopAnimationPlayer.prototype._finished;\n    /** @type {?} */\n    NoopAnimationPlayer.prototype.parentPlayer;\n    /** @type {?} */\n    NoopAnimationPlayer.prototype.totalTime;\n}\n//# sourceMappingURL=animation_player.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { scheduleMicroTask } from '../util';\nvar AnimationGroupPlayer = /** @class */ (function () {\n    function AnimationGroupPlayer(_players) {\n        var _this = this;\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._finished = false;\n        this._started = false;\n        this._destroyed = false;\n        this._onDestroyFns = [];\n        this.parentPlayer = null;\n        this.totalTime = 0;\n        this.players = _players;\n        var /** @type {?} */ doneCount = 0;\n        var /** @type {?} */ destroyCount = 0;\n        var /** @type {?} */ startCount = 0;\n        var /** @type {?} */ total = this.players.length;\n        if (total == 0) {\n            scheduleMicroTask(function () { return _this._onFinish(); });\n        }\n        else {\n            this.players.forEach(function (player) {\n                player.onDone(function () {\n                    if (++doneCount == total) {\n                        _this._onFinish();\n                    }\n                });\n                player.onDestroy(function () {\n                    if (++destroyCount == total) {\n                        _this._onDestroy();\n                    }\n                });\n                player.onStart(function () {\n                    if (++startCount == total) {\n                        _this._onStart();\n                    }\n                });\n            });\n        }\n        this.totalTime = this.players.reduce(function (time, player) { return Math.max(time, player.totalTime); }, 0);\n    }\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype._onFinish = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(function (fn) { return fn(); });\n            this._onDoneFns = [];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.init = /**\n     * @return {?}\n     */\n    function () { this.players.forEach(function (player) { return player.init(); }); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.onStart = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onStartFns.push(fn); };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype._onStart = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.hasStarted()) {\n            this._started = true;\n            this._onStartFns.forEach(function (fn) { return fn(); });\n            this._onStartFns = [];\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.onDone = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onDoneFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.onDestroy = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._onDestroyFns.push(fn); };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.hasStarted = /**\n     * @return {?}\n     */\n    function () { return this._started; };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.play = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.parentPlayer) {\n            this.init();\n        }\n        this._onStart();\n        this.players.forEach(function (player) { return player.play(); });\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.pause = /**\n     * @return {?}\n     */\n    function () { this.players.forEach(function (player) { return player.pause(); }); };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.restart = /**\n     * @return {?}\n     */\n    function () { this.players.forEach(function (player) { return player.restart(); }); };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.finish = /**\n     * @return {?}\n     */\n    function () {\n        this._onFinish();\n        this.players.forEach(function (player) { return player.finish(); });\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.destroy = /**\n     * @return {?}\n     */\n    function () { this._onDestroy(); };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype._onDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            this._onFinish();\n            this.players.forEach(function (player) { return player.destroy(); });\n            this._onDestroyFns.forEach(function (fn) { return fn(); });\n            this._onDestroyFns = [];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.reset = /**\n     * @return {?}\n     */\n    function () {\n        this.players.forEach(function (player) { return player.reset(); });\n        this._destroyed = false;\n        this._finished = false;\n        this._started = false;\n    };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.setPosition = /**\n     * @param {?} p\n     * @return {?}\n     */\n    function (p) {\n        var /** @type {?} */ timeAtPosition = p * this.totalTime;\n        this.players.forEach(function (player) {\n            var /** @type {?} */ position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;\n            player.setPosition(position);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.getPosition = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ min = 0;\n        this.players.forEach(function (player) {\n            var /** @type {?} */ p = player.getPosition();\n            min = Math.min(p, min);\n        });\n        return min;\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.beforeDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.players.forEach(function (player) {\n            if (player.beforeDestroy) {\n                player.beforeDestroy();\n            }\n        });\n    };\n    /* @internal */\n    /**\n     * @param {?} phaseName\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.triggerCallback = /**\n     * @param {?} phaseName\n     * @return {?}\n     */\n    function (phaseName) {\n        var /** @type {?} */ methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach(function (fn) { return fn(); });\n        methods.length = 0;\n    };\n    return AnimationGroupPlayer;\n}());\nexport { AnimationGroupPlayer };\nfunction AnimationGroupPlayer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AnimationGroupPlayer.prototype._onDoneFns;\n    /** @type {?} */\n    AnimationGroupPlayer.prototype._onStartFns;\n    /** @type {?} */\n    AnimationGroupPlayer.prototype._finished;\n    /** @type {?} */\n    AnimationGroupPlayer.prototype._started;\n    /** @type {?} */\n    AnimationGroupPlayer.prototype._destroyed;\n    /** @type {?} */\n    AnimationGroupPlayer.prototype._onDestroyFns;\n    /** @type {?} */\n    AnimationGroupPlayer.prototype.parentPlayer;\n    /** @type {?} */\n    AnimationGroupPlayer.prototype.totalTime;\n    /** @type {?} */\n    AnimationGroupPlayer.prototype.players;\n}\n//# sourceMappingURL=animation_group_player.js.map"]}